from telebot.async_telebot import AsyncTeleBot
from telebot import types
import dotenv
import os
import asyncio
import logging
from class_bd_work import Hepl_work_by_postgre
from create_keyboard import create_replay_markup, create_inline_markup
import aiofiles
from help_variable import get_need_value_list, element_on_page_value, get_twin_param_name, get_many_choose_variables, \
    params_dag_list

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')

if os.path.exists('.env'):
    dotenv.load_dotenv('.env')

bot = AsyncTeleBot(os.getenv('TOKEN'), colorful_logs=True)

need_example_class = Hepl_work_by_postgre()


@bot.message_handler(commands=['start'])
async def start_command(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã start

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id
    hello_text = await need_example_class.write_hello_func()

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, commands = start")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, f'{hello_text}, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª üëá',
                               reply_markup=create_replay_markup('', 'main'))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    else:
        await bot.send_message(chat_id, f'{hello_text}, –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'main')
async def main_bot_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ main

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == 'üì© –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π':
        list_user_alert = await need_example_class.get_alert_description(chat_id)
        if len(list_user_alert) > 0:
            await need_example_class.update_state_user(chat_id, 'get_subscribe_user')
            pagination_status = await need_example_class.get_pagination_status(chat_id)
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üì®',
                                   reply_markup=create_inline_markup(state='get_subscribe_user',
                                                                     list_itemns=list_user_alert,
                                                                     pagen=pagination_status,
                                                                     element_on_page=7))
        else:
            await bot.send_message(chat_id,
                                   '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫',
                                   reply_markup=create_replay_markup('', 'main')
                                   )

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üì∫ –í–∏—Ç—Ä–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö':
        await need_example_class.update_state_user(chat_id, 'datamart_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', 'datamart_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üóÇ –û—Ç—á–µ—Ç—ã –ø–æ —Å–ø—Ä–∞–≤–∫–∞–º':
        await need_example_class.update_state_user(chat_id, 'certificates_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'certificates_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üì° –ü–∞—Ä—Å–µ—Ä—ã':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üî¨ –¢–µ—Å—Ç–æ–≤—ã–µ –≤–∏—Ç—Ä–∏–Ω—ã –¥–∞–Ω–Ω—ã—Ö':
        await need_example_class.update_state_user(chat_id, 'test_datamart_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', 'test_datamart_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üñ• Bash commands':
        await need_example_class.update_state_user(chat_id, 'bash_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'bash_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å—ã DAG`s':
        await bot.send_message(chat_id,
                               text=await need_example_class.get_status_dag(),
                               reply_markup=create_replay_markup('', 'main'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üêò Postgres':
        await need_example_class.update_state_user(chat_id, 'postgres_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'postgres_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üì≤ Outer_tg_bot':
        await need_example_class.update_state_user(chat_id, 'outer_tg_bot_section')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá',
                               reply_markup=create_replay_markup('', 'outer_tg_bot_section'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'get_subscribe_user')
async def get_subscribe_user(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–≤–Ω–æ 'get_subscribe_user'
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞–º–∏ (–ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–∏—Ö –∏–ª–∏ –æ—Ç–ø–∏—Å–∫–∞)

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}")

    if await need_example_class.check_user(chat_id):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∞–ª–µ—Ä—Ç–∞–º
        if call_text in ['next', 'back']:
            pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                        text='–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å üì®',
                                        reply_markup=create_inline_markup(state='get_subscribe_user',
                                                                          list_itemns=await need_example_class.get_alert_description(
                                                                              chat_id),
                                                                          pagen=pagination_status,
                                                                          element_on_page=7))

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        elif call_text.isdigit():
            btn_text = [j['text'] for i in call.message.json['reply_markup']['inline_keyboard'] for j in i if
                        j['callback_data'] == call_text][0]
            await bot.delete_message(chat_id, message_id)
            await need_example_class.update_state_user(chat_id, 'main')
            await need_example_class.alert_status_update(chat_id, int(call_text))
            await bot.send_message(chat_id,
                                   f"""–í—ã —É—Å–ø–µ—à–Ω–æ {'<b>–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b> –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' if '‚úÖ' in btn_text else '<b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b> –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É'}
                                            \n"<b>{btn_text[2:]}</b>\"""",
                                   reply_markup=create_replay_markup('', 'main'),
                                   parse_mode='html')

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª, —Ç–æ –º–æ–∂–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif call_text == 'main':
            await bot.delete_message(chat_id, message_id)
            await need_example_class.update_state_user(chat_id, 'main')
            await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                                   reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id=chat_id, text='üëª')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'bloc_ITC')
async def bloc_ITC(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å itc
    - üìñ –ü–µ—Ä–µ—á–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏ –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –≤ –æ—Ç–≤–µ—Ç
                                       —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ itc, –Ω–æ –Ω–µ—Ç –≤ –ë–î

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == 'üìñ –ü–µ—Ä–µ—á–µ–Ω—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—Ä–∞–Ω':
        await need_example_class.update_state_user(chat_id, 'itc_load_file')
        await bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å',
                               reply_markup=create_replay_markup(message_text, 'bloc_ITC'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üîñ –í–≤–µ—Å—Ç–∏ –∫–∞–ø—á—É':
        await need_example_class.update_state_user(chat_id, 'itc_update_captcha')
        await bot.send_photo(chat_id, await need_example_class.get_captha_message_id(chat_id))
        await bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ üëÜ')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üåÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤':
        current_partner_flag = await need_example_class.update_partner_flag(chat_id)
        await bot.send_message(chat_id,
                               f"""–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ partner_flag = <b>{current_partner_flag}</b>.\n{'–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ –ë–î' if current_partner_flag else '–°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é'}""",
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'bloc_ITC'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(content_types='document',
                     func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'itc_load_file')
async def itc_load_file(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç
    —Ñ–∞–π–ª —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ itc, –Ω–æ –Ω–µ—Ç –≤ –ë–î

    :param message: —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    file_info = await bot.get_file(message.document.file_id)
    # –°–∫–∞—á–∏–≤–∞–π—Ç —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
    bytes_file_download = await bot.download_file(file_info.file_path)

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ñ–∞–π–ª–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–æ–≤ –µ–≥–æ –≤ –Ω—É–∂–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ
    first_line_file = bytes_file_download.decode('utf-8').splitlines()[0]
    file_name = message.document.file_name.split('.')[-1]
    # –ü–∞—Ç–µ—Ä –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏–¥–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—è
    patern = 'Countries and Territories'

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {file_info}")

    if patern in first_line_file and await need_example_class.check_user(chat_id) and file_name == 'txt':
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –ø—Ä–∏—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç - –Ω–∞–∑–≤–∞–Ω–µ —Ñ–∞–π–ª–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
        file_name_from_user = await need_example_class.get_missing_countries(bytes_file_download)
        await need_example_class.update_state_user(chat_id, 'bloc_ITC')

        async with aiofiles.open(file_name_from_user, 'rb') as f_itc:
            await bot.send_document(chat_id, f_itc, caption=f'–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ ITC')
        os.remove(file_name_from_user)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª
    elif patern not in first_line_file and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'bloc_ITC')
        await bot.send_message(chat_id, '–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
                               reply_markup=create_replay_markup('', 'bloc_ITC'))
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    else:
        await bot.send_message(chat_id, 'üëª')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'itc_update_captcha')
async def itc_update_captcha(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–ø—á–∏

    :param message: —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    if await need_example_class.check_user(chat_id):
        await need_example_class.update_captcha(chat_id, message_text)
        await need_example_class.update_state_user(chat_id, 'bloc_ITC')
        await bot.send_message(chat_id, 'üì´ –ö–∞–ø—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î',
                               reply_markup=create_replay_markup('', 'bloc_ITC'))
    else:
        await bot.send_message(chat_id, 'üëª')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'datamart_menue')
async def datamart_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º DATAMART

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üí∏ –í–Ω–µ—à–Ω—è—è —Ç–æ—Ä–≥–æ–≤–ª—è':
        await need_example_class.update_state_user(chat_id, 'foreign_trade_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'foreign_trade_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üíπ Datalens':
        await need_example_class.update_state_user(chat_id, 'datalens_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'datalens_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å—ã':
        await need_example_class.update_state_user(chat_id, 'balance_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'balance_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'certificates_menue')
async def certificates_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º certificates
    - "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –î–∞—Ç—ã –°–ø—Ä–∞–≤–æ–∫": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –î–∞—Ç—ã –°–ø—Ä–∞–≤–æ–∫':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_certificates_date')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–û—Ç—á–µ—Ç-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –°–ø—Ä–∞–≤–æ–∫':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'count_certificates_in_folder')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–ù–æ–≤—ã–µ —Å–ø—Ä–∞–≤–∫–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'checking_the_previous_day_certificates')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'Parser_menue')
async def Parser_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º Parser
    - "–ü–∞—Ä—Å–∏–Ω–≥ MOEX": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == 'üíπ MOEX':
        await need_example_class.update_state_user(chat_id, 'MOEX_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'MOEX_menue'))

    elif await need_example_class.check_user(chat_id) and message_text == 'üáÆüá≥ –ò–Ω–¥–∏—è':
        await need_example_class.update_state_user(chat_id, 'India_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'India_menue'))

    elif await need_example_class.check_user(chat_id) and message_text == 'üçÉ USDA':
        await need_example_class.update_state_user(chat_id, 'bloc_USDA')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'bloc_USDA'))

    elif await need_example_class.check_user(chat_id) and message_text == 'üåæ FAO':
        await need_example_class.update_state_user(chat_id, 'bloc_FAO')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'bloc_FAO'))

    elif await need_example_class.check_user(chat_id) and message_text == 'üó∫ ITC':
        await need_example_class.update_state_user(chat_id, 'bloc_ITC')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup(message_text, 'bloc_ITC'))

    elif await need_example_class.check_user(chat_id) and message_text == 'üáπüá≠ –¢–∞–∏–ª–∞–Ω–¥':
        await need_example_class.update_state_user(chat_id, 'Thailand_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'Thailand_menue'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'bloc_USDA')
async def bloc_USDA(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º USDA
    - "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã psd": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã psd':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'usda_update_table')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã reference_data':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'usda_update_reference_data')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'bloc_FAO')
async def bloc_FAO(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º FAO
    - "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü FAO": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü FAO':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'fao_update_table')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'test_datamart_menue')
async def test_datamart_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º TEST
    - "–¢–µ—Å—Ç –í–∏—Ç—Ä–∏–Ω–∞ Year_Data": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –í–∏—Ç—Ä–∏–Ω–∞ Year_Data':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_web_app_datamart')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –í–∏—Ç—Ä–∏–Ω–∞ Month_Data':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_etl_month_datamart_update')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_update_ref_table_static')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –í–∏—Ç—Ä–∏–Ω–∞ –†–µ–≥–∏–æ–Ω–æ–≤ –†–§':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_etl_region_update_datamart')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ref_balances':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_update_ref_balances')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))
    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ balance_master':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_update_balance_master')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ balance_trade_master':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_update_balance_trade_master')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–¢–µ—Å—Ç –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è web_app_logs':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'test_update_ref_logs_table_web_app')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'bash_menue')
async def bash_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º VM
    - "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ VM": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ VM':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'reboot_vm')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'postgres_menue')
async def postgres_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è –º–µ–Ω—é, –≥–¥–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ DAG —Å —Ç—ç–≥–æ–º POSTGRES
    - "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ì–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö": –Ω–∞–∑–≤–∞–Ω–∏–µ DAG (–∫–∞–∫ –ø—Ä–∏–º–µ—Ä), –∫–æ—Ç–æ—Ä–æ–µ –º—ã –≤—ã–±–∏—Ä–∞–µ–º –∏ —Ç–¥.

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :return:
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ì–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'sources_updates')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ú–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'sources_updates_month')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ customs_vanilla –≤ customs':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_customs_vanilla_in_customs')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ fts –≤ customs_month':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_fts_in_customs_month')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ customs_vanilla –≤ customs_month':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_customs_vanilla_in_customs_month')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '–ü–µ—Ä–µ–Ω–æ—Å ref_country –Ω–∞ MH':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'data_transfer_ref_country_to_MH')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ fts –≤ customs':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_scripts_fts_in_customs')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'interaction_with_dag')
async def interaction_with_dag(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã DAG

    - ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ DAG: –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ DAG
    - üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞: –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ DAG
    - ‚è≥ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ timeout: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ timeout –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ DAG

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if await need_example_class.check_user(chat_id) and message_text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ DAG':
        # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
        operation_name = await need_example_class.get_choose_operation_name(chat_id)
        dag_id = await need_example_class.get_dag_id(chat_id)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ DAG
        dag_variables = await need_example_class.get_variables_dag(operation_name, chat_id)
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        timeout_value = await need_example_class.get_timeout_operation_value(operation_name)

        if await need_example_class.check_timeout_operation(operation_name, timeout_value['field'],
                                                            timeout_value['timeout']):
            # –¢—Ä–∏–≥–≥–µ—Ä–∏–º DAG
            response_dag_run = await need_example_class.trigger_dag(dag_id, dag_variables)

            if 400 in response_dag_run:
                await bot.send_message(chat_id, response_dag_run[
                    0] + f'\n<b>{operation_name}</b> –∑–∞–ø—É—Å–∫ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∑–∂–µ')
            else:
                await bot.send_message(chat_id, f'‚ñ∂Ô∏è –ü—Ä–æ—Ü–µ—Å—Å <b>"{operation_name}"</b> –∑–∞–ø—É—â–µ–Ω',
                                       parse_mode='html')
        else:
            await bot.send_message(chat_id, f'üïí –í—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ <b>"{operation_name}"</b> –µ—â–µ –Ω–µ –ø—Ä–∏—à–ª–æ',
                                   parse_mode='html')

    # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞
    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üîÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞':
        # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
        operation_name = await need_example_class.get_choose_operation_name(chat_id)
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DAG
        list_variables_dag = await need_example_class.get_list_variables_dag(operation_name)

        if len(list_variables_dag) > 0:
            await need_example_class.update_state_user(chat_id, 'choos_value_dag')
            pagination_status = await need_example_class.get_pagination_status(chat_id)
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                   reply_markup=create_inline_markup(state='choos_value_dag',
                                                                     list_itemns=list_variables_dag,
                                                                     pagen=pagination_status,
                                                                     element_on_page=10))
        else:
            await bot.send_message(chat_id, f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞ <b>"{operation_name}"</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                                   parse_mode='html')

    # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞–ø—É—Å–∫–∞ DAG
    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '‚è≥ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ timeout':
        # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
        operation_name = await need_example_class.get_choose_operation_name(chat_id)
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞–ø—É—Å–∫–∞ DAG
        list_timeout_variables_dag = await need_example_class.get_list_timeout_operation_value(operation_name)

        if len(list_timeout_variables_dag) > 0:
            await need_example_class.update_state_user(chat_id, 'choos_timeout_dag')
            pagination_status = await need_example_class.get_pagination_status(chat_id)
            await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä timeout DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                   reply_markup=create_inline_markup(state='choos_timeout_dag',
                                                                     list_itemns=list_timeout_variables_dag,
                                                                     pagen=pagination_status,
                                                                     element_on_page=10))
        else:
            await bot.send_message(chat_id, f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã timeout <b>"{operation_name}"</b> –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == '‚è∫ –¢–∏–ø –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤':
        # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
        operation_name = await need_example_class.get_choose_operation_name(chat_id)

        current_type_choose_params = await need_example_class.get_many_or_one_value(operation_name)
        await need_example_class.update_state_user(chat_id, 'approve_swap_type_params')
        await bot.send_message(chat_id,
                               f"""‚ÅâÔ∏è –¢–µ–∫—É—â–∏–π —Ç–∏–ø –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ <b>{"–û–¥–∏–Ω–æ—á–Ω—ã–π" if current_type_choose_params else "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"}</b> \n–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ <b>{"–û–¥–∏–Ω–æ—á–Ω—ã–π" if not current_type_choose_params else "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"}</b>""",
                               reply_markup=create_inline_markup('approve_swap_type_params'),
                               parse_mode='html')

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'üöÆ –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π dag_run':
        await need_example_class.update_state_user(chat_id, 'approve_remove_dag_run')
        await bot.send_message(chat_id, 'üîò –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                               reply_markup=create_inline_markup('approve_remove_dag_run'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, await need_example_class.get_dag_tag_func_state(chat_id))
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', await need_example_class.get_dag_tag_func_state(
                                   chat_id)))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'choos_value_dag')
async def choos_value_dag(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞ DAG

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
    operation_name = await need_example_class.get_choose_operation_name(chat_id)
    # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ DAG
    list_variables_dag = await need_example_class.get_list_variables_dag(operation_name)

    logging.info(
        f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}, operation_name = {operation_name}")

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup(state='choos_value_dag',
                                                                      list_itemns=list_variables_dag,
                                                                      pagen=pagination_status,
                                                                      element_on_page=10))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å dag state = 'interaction_with_dag'
    elif call_text == 'back_menue' and await need_example_class.check_user(chat_id):
        await bot.delete_message(chat_id, message_id)
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    elif call_text in list_variables_dag and await need_example_class.check_user(chat_id):
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –ë–î
        await need_example_class.update_etl_choose_variable(user_id=chat_id, variable_name=call_text)
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        description_variable = await need_example_class.get_description(operation_name, call_text, flag_desc='var')
        if await need_example_class.get_many_or_one_value(operation_name):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            current_variable_value = await need_example_class.get_current_variable_value(chat_id, 'variables_dag')

            # –î–ª—è Dag —É –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
            # –ö –ø—Ä–∏–º–µ—Ä—É –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if operation_name in ['–û—Ç—á–µ—Ç-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –°–ø—Ä–∞–≤–æ–∫']:
                current_value_twin = await need_example_class.get_current_twin_variable_value(chat_id, 'variables_dag',
                                                                                              get_twin_param_name(
                                                                                                  operation_name,
                                                                                                  call_text))
            else:
                current_value_twin = None

            await need_example_class.update_state_user(chat_id, 'update_new_value_dag')
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                        text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{call_text}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>{call_text}</b> = <b>{current_variable_value}</b> \n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
                                        parse_mode="html",
                                        reply_markup=create_inline_markup(state='update_new_value_dag',
                                                                          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                          list_itemns=get_need_value_list(call_text,
                                                                                                          current_variable_value,
                                                                                                          current_value_twin),
                                                                          pagen=pagination_status,
                                                                          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                          element_on_page=element_on_page_value[
                                                                              call_text]))
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            current_variable_value = await need_example_class.get_current_variable_value(chat_id, 'variables_dag',
                                                                                         flag_return=True)
            await need_example_class.update_etl_choose_variable_value_many_choose(user_id=chat_id,
                                                                                  variable_name=call_text,
                                                                                  operation_name=operation_name,
                                                                                  flag_update=True)
            await need_example_class.update_state_user(chat_id, 'many_choose_update_new_value_dag')
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                        text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{call_text}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è <b>{call_text}</b> –æ—Ç–º–µ—á–µ–Ω—ã üîò \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä:',
                                        parse_mode="html",
                                        reply_markup=create_inline_markup(state='many_choose_update_new_value_dag',
                                                                          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                          list_itemns=get_many_choose_variables(
                                                                              call_text,
                                                                              current_variable_value),
                                                                          pagen=pagination_status,
                                                                          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                          element_on_page=element_on_page_value[
                                                                              call_text]))


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'update_new_value_dag')
async def update_new_value_dag(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—É—Å–∫–∞ DAG
    –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ç–∏–ø–µ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏–∑–º–µ–Ω—è–µ–º
    variable_name = await need_example_class.get_variable_name(chat_id)
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    current_variable_value = await need_example_class.get_current_variable_value(chat_id, 'variables_dag')
    # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
    operation_name = await need_example_class.get_choose_operation_name(chat_id)
    description_variable = await need_example_class.get_description(operation_name, variable_name, flag_desc='var')

    # –î–ª—è Dag —É –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≤–∏—Å—è—Ç –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
    # –ö –ø—Ä–∏–º–µ—Ä—É –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    if variable_name in ['date_end', 'date_start']:
        current_value_twin = await need_example_class.get_current_twin_variable_value(chat_id, 'variables_dag',
                                                                                      get_twin_param_name(
                                                                                          operation_name,
                                                                                          variable_name))
    else:
        current_value_twin = None

    logging.info(
        f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}, variable_name = {variable_name}")

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{variable_name}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>{variable_name}</b> = <b>{current_variable_value}</b> \n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
                                    parse_mode="html",
                                    reply_markup=create_inline_markup(state='update_new_value_dag',
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                      list_itemns=get_need_value_list(variable_name,
                                                                                                      current_variable_value,
                                                                                                      current_value_twin),
                                                                      pagen=pagination_status,
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                      element_on_page=element_on_page_value[
                                                                          variable_name]))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é state = 'choos_value_dag'
    elif call_text == 'back_menue' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'choos_value_dag')
        operation_name = await need_example_class.get_choose_operation_name(chat_id)
        list_variables_dag = await need_example_class.get_list_variables_dag(operation_name)
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup(state='choos_value_dag',
                                                                      list_itemns=list_variables_dag,
                                                                      pagen=pagination_status,
                                                                      element_on_page=10))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    elif call_text in get_need_value_list(variable_name, current_variable_value,
                                          current_value_twin) and await need_example_class.check_user(chat_id):
        await bot.delete_message(chat_id, message_id)
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        await need_example_class.update_etl_choose_variable(user_id=chat_id, variable_value=call_text)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        await need_example_class.update_variables_dag(chat_id, 'variables_dag')

        await bot.send_message(chat_id,
                               f'–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <b>{variable_name}</b> = <b>{call_text}</b> \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'many_choose_update_new_value_dag')
async def many_choose_update_new_value_dag(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—É—Å–∫–∞ DAG
    –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Ç–∏–ø–µ –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏–∑–º–µ–Ω—è–µ–º
    variable_name = await need_example_class.get_variable_name(chat_id)
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    current_variable_value = await need_example_class.get_variable_value_many_choose(chat_id)
    # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
    operation_name = await need_example_class.get_choose_operation_name(chat_id)
    description_variable = await need_example_class.get_description(operation_name, variable_name, flag_desc='var')

    logging.info(
        f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}, variable_name = {variable_name}")

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{variable_name}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è <b>{variable_name}</b> –æ—Ç–º–µ—á–µ–Ω—ã üîò \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä:',
                                    parse_mode="html",
                                    reply_markup=create_inline_markup(state='many_choose_update_new_value_dag',
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                      list_itemns=get_many_choose_variables(
                                                                          variable_name,
                                                                          current_variable_value),
                                                                      pagen=pagination_status,
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                      element_on_page=element_on_page_value[
                                                                          variable_name]))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é state = 'choos_value_dag'
    elif call_text == 'back_menue' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'choos_value_dag')
        operation_name = await need_example_class.get_choose_operation_name(chat_id)
        list_variables_dag = await need_example_class.get_list_variables_dag(operation_name)
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup(state='choos_value_dag',
                                                                      list_itemns=list_variables_dag,
                                                                      pagen=pagination_status,
                                                                      element_on_page=10))

    elif call_text in params_dag_list[variable_name] and await need_example_class.check_user(chat_id):
        current_variable_value.remove(
            call_text) if call_text in current_variable_value else current_variable_value.append(call_text)
        await need_example_class.update_etl_choose_variable_value_many_choose(user_id=chat_id,
                                                                              variable_value=list(
                                                                                  map(int if call_text.isdigit() else str,
                                                                                      current_variable_value)),
                                                                              flag_update=False)
        pagination_status = await need_example_class.get_pagination_status(chat_id, 'current_value')
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{variable_name}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è <b>{variable_name}</b> –æ—Ç–º–µ—á–µ–Ω—ã üîò \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä:',
                                    parse_mode="html",
                                    reply_markup=create_inline_markup(state='many_choose_update_new_value_dag',
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                      list_itemns=get_many_choose_variables(
                                                                          variable_name,
                                                                          current_variable_value),
                                                                      pagen=pagination_status,
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                      element_on_page=element_on_page_value[
                                                                          variable_name]))

    elif call_text == 'save' and await need_example_class.check_user(chat_id):
        await need_example_class.update_status_operation_many_value(chat_id)
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')
        await bot.delete_message(chat_id, message_id)
        await bot.send_message(chat_id,
                               f'‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'choos_timeout_dag')
async def choos_timeout_dag(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞–ø—É—Å–∫–∞ DAG

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
    operation_name = await need_example_class.get_choose_operation_name(chat_id)
    # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞–ø—É—Å–∫–∞ DAG
    list_timeout_variables_dag = await need_example_class.get_list_timeout_operation_value(operation_name)

    logging.info(
        f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}, operation_name = {operation_name}")

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä timeout DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup(state='choos_timeout_dag',
                                                                      list_itemns=list_timeout_variables_dag,
                                                                      pagen=pagination_status,
                                                                      element_on_page=10))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —Ä–∞–±–æ—Ç—ã —Å dag state = 'interaction_with_dag'
    elif call_text == 'back_menue' and await need_example_class.check_user(chat_id):
        await bot.delete_message(chat_id, message_id)
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    elif call_text in list_timeout_variables_dag and await need_example_class.check_user(chat_id):
        description_variable = await need_example_class.get_description(operation_name, call_text, flag_desc='var')
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –ë–î
        await need_example_class.update_etl_choose_variable(user_id=chat_id, variable_name=call_text)
        await need_example_class.update_state_user(chat_id, 'update_new_timeout_value')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        current_variable_value = await need_example_class.get_current_variable_value(chat_id, 'timeout_operation_value')
        pagination_status = await need_example_class.get_pagination_status(chat_id)

        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{call_text}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>{call_text}</b> = <b>{current_variable_value}</b> \n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
                                    parse_mode="html",
                                    reply_markup=create_inline_markup(state='update_new_timeout_value',
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                      list_itemns=get_need_value_list(call_text,
                                                                                                      current_variable_value),
                                                                      pagen=pagination_status,
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                      element_on_page=element_on_page_value[call_text]))


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'update_new_timeout_value')
async def update_new_timeout_value(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞ DAG

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ü–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏–∑–º–µ–Ω—è–µ–º
    variable_name = await need_example_class.get_variable_name(chat_id)
    # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    current_variable_value = await need_example_class.get_current_variable_value(chat_id, 'timeout_operation_value')

    operation_name = await need_example_class.get_choose_operation_name(chat_id)
    logging.info(
        f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, callback = {call_text}, variable_name = {variable_name}")

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    if call_text in ['next', 'back'] and await need_example_class.check_user(chat_id):
        description_variable = await need_example_class.get_description(operation_name, variable_name, flag_desc='var')
        pagination_status = await need_example_class.get_pagination_status(chat_id, call_text)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text=f'–ü–∞—Ä–∞–º–µ—Ç—Ä <b>{variable_name}</b> –æ—Ç–≤–µ—á–∞–µ—Ç: <b>{description_variable}</b>.\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ <b>{variable_name}</b> = <b>{current_variable_value}</b> \n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
                                    parse_mode="html",
                                    reply_markup=create_inline_markup(state='update_new_timeout_value',
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                                                                      list_itemns=get_need_value_list(variable_name,
                                                                                                      current_variable_value),
                                                                      pagen=pagination_status,
                                                                      # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                                                                      element_on_page=element_on_page_value[
                                                                          variable_name]))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é state = 'choos_timeout_dag'
    elif call_text == 'back_menue' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'choos_timeout_dag')
        list_timeout_variables_dag = await need_example_class.get_list_timeout_operation_value(operation_name)
        pagination_status = await need_example_class.get_pagination_status(chat_id)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä timeout DAG –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ‚öôÔ∏è',
                                    parse_mode="markdown",
                                    reply_markup=create_inline_markup(state='choos_timeout_dag',
                                                                      list_itemns=list_timeout_variables_dag,
                                                                      pagen=pagination_status,
                                                                      element_on_page=10))

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    elif call_text in get_need_value_list(variable_name,
                                          current_variable_value) and await need_example_class.check_user(chat_id):

        await bot.delete_message(chat_id, message_id)
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        await need_example_class.update_etl_choose_variable(user_id=chat_id, variable_value=call_text)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        await need_example_class.update_variables_dag(chat_id, 'timeout_operation_value')

        await bot.send_message(chat_id,
                               f'–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ <b>{variable_name}</b> = <b>{call_text}</b> \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'outer_tg_bot_section')
async def outer_tg_bot_section(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–¥–µ–ª –∏–∑ outer_tg_bot, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è (–ø–∞—Ä—Å–∏–Ω–≥, etl, –∏ —Ç.–¥.)

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == 'üöß –¢–∞—Ä–∏—Ñ–Ω—ã–µ/–ù–µ—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã':
        await need_example_class.update_state_user(chat_id, 'barier')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª üëá',
                               reply_markup=create_replay_markup('', 'barier'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üö™ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await need_example_class.update_state_user(chat_id, 'main')
        await bot.send_message(chat_id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!',
                               reply_markup=create_replay_markup('', 'main'))

    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'barier')
async def barier(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ üöß –¢–∞—Ä–∏—Ñ–Ω—ã–µ/–ù–µ—Ç–∞—Ä–∏—Ñ–Ω—ã–µ –±–∞—Ä—å–µ—Ä—ã

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == '–ü—Ä–æ–≤–µ—Ä–∫–∞_–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'cert_update_dag')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))
    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'Chinaport_parser':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'chinaport_parser')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'outer_tg_bot_section')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', 'outer_tg_bot_section'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'approve_remove_dag_run')
async def approve_remove_dag_run(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ dag

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
    operation_name = await need_example_class.get_choose_operation_name(chat_id)

    if call_text == 'yes' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')

        dag_id = await need_example_class.get_dag_id(chat_id)
        message_status = await need_example_class.delete_last_dag_run(dag_id)

        await bot.delete_message(chat_id, message_id)
        await bot.send_message(chat_id,
                               f'{message_status} \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))
    elif call_text == 'no' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')
        await bot.delete_message(chat_id, message_id)
        await bot.send_message(chat_id,
                               f'–£–¥–∞–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))


@bot.callback_query_handler(
    func=lambda call: need_example_class.dct_user_state[call.message.chat.id] == 'approve_swap_type_params')
async def approve_swap_type_params(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–ª–∏ –æ–¥–∏–Ω–æ—á–Ω—ã–π)

    :param call: callback —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –≤—ã—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞

    :return:
    """
    call_text = call.data
    chat_id = call.message.chat.id
    message_id = call.message.message_id

    # –ù–∞–∑–≤–∞–Ω–∏–µ dag, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –¥–∞–ª–∏ –µ–º—É –≤ –ë–î
    operation_name = await need_example_class.get_choose_operation_name(chat_id)

    if call_text == 'yes' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')

        corrent_type_choose_variable = await need_example_class.switch_type_choose_variable(operation_name)

        await bot.delete_message(chat_id, message_id)

        await bot.send_message(chat_id=chat_id,
                               text=f'–¢–∏–ø –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è <b>{operation_name}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ä–µ–∂–∏–º <b>{"–û–¥–∏–Ω–æ—á–Ω—ã–π" if corrent_type_choose_variable else "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"}</b>',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))

    elif call_text == 'no' and await need_example_class.check_user(chat_id):
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag')
        await bot.delete_message(chat_id, message_id)
        await bot.send_message(chat_id,
                               f'–°–º–µ–Ω–∞ —Ç–∏–ø–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞ \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     operation_name)
                                                                 ))


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'India_menue')
async def India_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–Ω–¥–∏–∏

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == '–ò–Ω–¥–∏—è tradestat_commerce':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'India_tradestat_commerce')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'Tradestat_commerce new month':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'Check_tradestat_commerce_new_month')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'Thailand_menue')
async def Thailand_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¢–∞–∏–ª–∞–Ω–¥–∞

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.get_access_section(chat_id, message_text[
                                                            2:]) and message_text == 'Thailand_customs':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'Thailand_customs')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[
                                                              2:]) and message_text == 'Thailand_customs new month':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'Thailand_customs_new_month')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'MOEX_menue')
async def MOEX_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–∏—Ä–∂–∏ MOEX

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    # –ë–ª–æ–∫ —Å –≤–∏—Ç—Ä–∏–Ω–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    if await need_example_class.check_user(chat_id) and message_text == '–ü–∞—Ä—Å–∏–Ω–≥ MOEX':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'moex_etl_proces')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'Parser_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é üëá',
                               reply_markup=create_replay_markup('', 'Parser_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'balance_menue')
async def balance_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö balances

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.check_user(chat_id) and message_text == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ref_balances':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_ref_balances')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ balance_master':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_balance_master')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ balance_trade_master':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_balance_trade_master')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'datamart_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', 'datamart_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'foreign_trade_menue')
async def foreign_trade_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –í–Ω–µ—à–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.check_user(chat_id) and message_text == '–í–∏—Ç—Ä–∏–Ω–∞ Year_Data':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'etl_web_app_datamart')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)))

    elif await need_example_class.check_user(chat_id) and message_text == '–í–∏—Ç—Ä–∏–Ω–∞ Month_Data':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'etl_month_datamart_update')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag',
                                                                 flag_one_choose_value=await need_example_class.get_only_one_choose_value(
                                                                     message_text)
                                                                 ))

    elif await need_example_class.check_user(chat_id) and message_text == '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_ref_table_static')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'datamart_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', 'datamart_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')


@bot.message_handler(
    func=lambda message: need_example_class.dct_user_state[message.chat.id] == 'datalens_menue')
async def datalens_menue(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤ datalens

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """

    chat_id = message.chat.id
    message_text = message.text

    logging.info(f"user = {chat_id}, state = {need_example_class.dct_user_state[chat_id]}, message = {message_text}")

    if await need_example_class.check_user(chat_id) and message_text == '–í–∏—Ç—Ä–∏–Ω–∞ –†–µ–≥–∏–æ–Ω–æ–≤ –†–§':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'etl_region_update_datamart')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–í–∏—Ç—Ä–∏–Ω–∞ World Trade':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'etl_world_trade_update')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–í–∏—Ç—Ä–∏–Ω–∞ outer_tg_bot':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_outer_tg_bot_datamart')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–í–∏—Ç—Ä–∏–Ω—ã –ª–æ–≥–æ–≤ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'dag_update_web_app_logs')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.check_user(chat_id) and message_text == '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –¥–ª—è web_app_logs':
        await need_example_class.update_etl_choose_dag(chat_id, message_text, 'update_ref_logs_table_web_app')
        await need_example_class.update_state_user(chat_id, 'interaction_with_dag', True)
        description_operation = await need_example_class.get_description(message_text, flag_desc='desc')
        await bot.send_message(chat_id, f'–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç <b>{description_operation}</b>.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ üëá',
                               parse_mode='html',
                               reply_markup=create_replay_markup('', 'interaction_with_dag'))

    elif await need_example_class.get_access_section(chat_id, message_text[2:]) and message_text == 'üîô –ù–∞–∑–∞–¥':
        await need_example_class.update_state_user(chat_id, 'datamart_menue')
        await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏—Ç—Ä–∏–Ω—É –¥–∞–Ω–Ω—ã—Ö üëá',
                               reply_markup=create_replay_markup('', 'datamart_menue'))
    else:
        await bot.send_message(chat_id, 'üïµüèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞')

if __name__ == '__main__':
    asyncio.run(bot.infinity_polling())
